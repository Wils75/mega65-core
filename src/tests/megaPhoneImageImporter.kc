byte* TEST256 = $4000;


kickasm(resource "gfxTest.png", pc TEST256)
{{

.var palList = List(256)
.var pictureList = List()
.var pixelTable = Hashtable()
.var pixelListTable = Hashtable()

// Creates a palette for a picture.
// The palette is a hashtable mapping color RGB in hexadeciaml RRGGBB format to the index of the color.
// The size of the palette is the number of different RGB-colors present in the picture
// Parameters
// - picture: a picture loaded using LoadPicture()
.function getPalette(picture)
{
	.var palette = Hashtable()
	.var colIdx = 0;

	.eval palette.put(toHexString(0, 6), colIdx++)
	.eval palette.put(toHexString(16777215, 6), colIdx++)
	.eval palette.put(toHexString(8921088, 6), colIdx++)
	.eval palette.put(toHexString(6869160, 6), colIdx++)
	.eval palette.put(toHexString(11024544, 6), colIdx++)
	.eval palette.put(toHexString(5290008, 6), colIdx++)
	.eval palette.put(toHexString(1577104, 6), colIdx++)
	.eval palette.put(toHexString(15788120, 6), colIdx++)
	.eval palette.put(toHexString(10504192, 6), colIdx++)
	.eval palette.put(toHexString(4664091, 6), colIdx++)
	.eval palette.put(toHexString(13138032, 6), colIdx++)
	.eval palette.put(toHexString(4737096, 6), colIdx++)
	.eval palette.put(toHexString(8421504, 6), colIdx++)
	.eval palette.put(toHexString(10026904, 6), colIdx++)
	.eval palette.put(toHexString(5279952, 6), colIdx++)
	.eval palette.put(toHexString(12105912, 6), colIdx++)

	.for (var x=0; x<picture.width; x++)
	{
		.for (var y=0; y<picture.height; y++)
		{
			.var col = toHexString(picture.getPixel(x,y),6)
			.if(palette.get(col)==null)
			{
        .eval palette.put(col,colIdx++)
      }
		}
	}

	.for(var pIterator = 0;
		pIterator < palette.keys().size();
		pIterator++)
	{
		.var tempIndex = palette.get(palette.keys().get(pIterator))
		.var tempColour = palette.keys().get(pIterator)
		.eval palette.put(tempColour, tempIndex)
		.eval palList.set(tempIndex, tempColour)
	}

	.return palette
}

// Get the RGB value of a palette color
// Parameters
// - palette: A palette typically created using getPalette(picture)
// - idx: The index of the color in the palette to get the red value
// Returns the RGB value of the color with the given index. 0 if the index is not defined.
.function getPaletteRgb(palette, idx) {
	.if(idx>=palette.keys().size())
		.return 0
//	.var colHex = palette.keys().get(idx)
	.var colHex = palList.get(idx)
	.return colHex.asNumber(16)
}

// Get the red value of a palette color
// Parameters
// - palette: A palette typically created using getPalette(picture)
// - idx: The index of the color in the palette to get the red value
.function getPaletteRed(palette, idx) {
	.return getPaletteRgb(palette, idx)>>16 & $ff
}

// Get the green value of a palette color
// Parameters
// - palette: A palette typically created using getPalette(picture)
// - idx: The index of the color in the palette to get the green value
.function getPaletteGreen(palette, idx) {
	.return getPaletteRgb(palette, idx)>>8 & $ff
}

// Get the blue value of a palette color
// Parameters
// - palette: A palette typically created using getPalette(picture)
// - idx: The index of the color in the palette to get the blue value
.function getPaletteBlue(palette, idx) {
	.return getPaletteRgb(palette, idx) & $ff
}

// Get the index in a color palette for a single pixel in a picture
// Parameters
// - picture: a picture loaded using LoadPicture()
// - x: the x-coordinate of the pixel
// - y: the y-coordinate of the pixel
// - palette: a palette for the picture typically created using getPalette(picture)
.function getPaletteColour(picture, palette, x, y) {
	.return palette.get(toHexString(picture.getPixel(x,y),6))
}

// Converts 1 pixels to a single color byte using the palette
// - picture: a picture loaded using LoadPicture()
// - x: the x-coordinate of the pixel
// - y: the y-coordinate of the pixel
// - palette: a palette for the picture typically created using getPalette(picture)
.function getFullcolourByte(picture, palette, x, y) {
 	.return getPaletteColour(picture, palette, x, y) & $ff
}

{
	.var test256 = LoadPicture("gfxTest.png")
	.var palette256 = getPalette(test256)
	.var pixIdx = 0
	.var valIdx

	.for (var y1 = 0; y1 < test256.height; y1 += 8)
	{
	  .for (var x1 = 0; x1 < test256.width; x1 += 8)
	  {
			.var tempString = ""
			.var tempValueList = List(64)
			.eval valIdx = 0
			.for (var y2 = 0; y2 < 8; y2++)
				{
					.for (var x2 = 0; x2 < 8; x2++)
					{
						.eval tempString = tempString + toHexString(getFullcolourByte(test256, palette256, (x1 + x2), (y1 + y2)), 2)
						.eval tempValueList.set(valIdx, getFullcolourByte(test256, palette256, (x1 + x2), (y1 + y2)))
						.eval valIdx++
//						.byte getFullcolourByte(test256, palette256, (x1 + x2), (y1 + y2))
					}
				}

			.if(pixelTable.get(tempString) != null)
			{
				.eval pictureList.add(pixelTable.get(tempString))
			}

			.if(pixelTable.get(tempString) == null)
			{
				.eval pixelTable.put(tempString, pixIdx)
				.eval pixelListTable.put(pixIdx, tempValueList)
				.eval pictureList.add(pixIdx)
				.eval pixIdx++
			}
		}
	}

// pictureListTable is a hashtable that contains <index number>:<64 pixel values>
// pictureList is a list of tiles from which to build the image

	TILES:
	.for(var i = 0; i < pictureList.size(); i++)
	{
		.var tempList = pixelListTable.get(pictureList.get(i))
		.for(var j = 0; j < 64; j++)
		{
			.byte tempList.get(j)
		}
	}

	SCREENARRAY:
	.for(var i = 0; i < pictureList.size(); i++)
	{
		.print "SCREENARRAY(" + i + ") = " + pictureList.get(i)
		.byte pictureList.get(i)
	}

PALETTE256:
.for(var i = 0; i < 256; i++) .byte getPaletteRed(palette256, i)
.for(var i = 0; i < 256; i++) .byte getPaletteGreen(palette256, i)
.for(var i = 0; i < 256; i++) .byte getPaletteBlue(palette256, i)
}
}}
